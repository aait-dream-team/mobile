// Mocks generated by Mockito 5.4.2 from annotations
// in bus_navigation/test/application/HistoryBloc/history_bloc_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:bus_navigation/features/history/data_provider/route_history_data_provider.dart'
    as _i2;
import 'package:bus_navigation/features/history/models/RouteHistory.dart'
    as _i5;
import 'package:bus_navigation/features/history/repository/route_history_repository.dart'
    as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeRouteHistoryDataProvider_0 extends _i1.SmartFake
    implements _i2.RouteHistoryDataProvider {
  _FakeRouteHistoryDataProvider_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [RouteHistoryRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockRouteHistoryRepository extends _i1.Mock
    implements _i3.RouteHistoryRepository {
  MockRouteHistoryRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.RouteHistoryDataProvider get dataProvider => (super.noSuchMethod(
        Invocation.getter(#dataProvider),
        returnValue: _FakeRouteHistoryDataProvider_0(
          this,
          Invocation.getter(#dataProvider),
        ),
      ) as _i2.RouteHistoryDataProvider);
  @override
  _i4.Future<Map<DateTime, List<_i5.RouteModel>>> getAllRoutes() =>
      (super.noSuchMethod(
        Invocation.method(
          #getAllRoutes,
          [],
        ),
        returnValue: _i4.Future<Map<DateTime, List<_i5.RouteModel>>>.value(
            <DateTime, List<_i5.RouteModel>>{}),
      ) as _i4.Future<Map<DateTime, List<_i5.RouteModel>>>);
  @override
  _i4.Future<void> addRoute(_i5.RouteModel? route) => (super.noSuchMethod(
        Invocation.method(
          #addRoute,
          [route],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
}
