// Mocks generated by Mockito 5.4.2 from annotations
// in bus_navigation/test/application/NavigateBloc/navigate_bloc_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:bus_navigation/features/navigate/data_provider/navigation_data_provider.dart'
    as _i2;
import 'package:bus_navigation/features/navigate/repository/navigation_repository.dart'
    as _i3;
import 'package:latlong2/latlong.dart' as _i5;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeNavigationDataProvider_0 extends _i1.SmartFake
    implements _i2.NavigationDataProvider {
  _FakeNavigationDataProvider_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [NavigationRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockNavigationRepository extends _i1.Mock
    implements _i3.NavigationRepository {
  MockNavigationRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.NavigationDataProvider get dataProvider => (super.noSuchMethod(
        Invocation.getter(#dataProvider),
        returnValue: _FakeNavigationDataProvider_0(
          this,
          Invocation.getter(#dataProvider),
        ),
      ) as _i2.NavigationDataProvider);
  @override
  _i4.Future<List<List<_i5.LatLng>>> getRouteDetails() => (super.noSuchMethod(
        Invocation.method(
          #getRouteDetails,
          [],
        ),
        returnValue:
            _i4.Future<List<List<_i5.LatLng>>>.value(<List<_i5.LatLng>>[]),
      ) as _i4.Future<List<List<_i5.LatLng>>>);
}
